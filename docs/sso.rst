==============
Single Sign On
==============

.. contents::


SSO (Single Sign On) is currently the only way to authenticate a user.


Integration On External Pages
=============================

To be able to provide SSO for IRIS a page using the IRIS widgets must provide
sso settings.

.. sourcecode:: javascript

    var IRISConfig = {
        sso: function() {
            this.remote_auth = "<message>, <hmac>, <timestamp>";
            this.api_key = "...";
        }
    }

remote_auth
-----------

The remote_auth property provides the following three parts to login/logout
the user via sso.

The Message
^^^^^^^^^^^

This is the JSON serialized user data and must be base64 encoded.

User data can contain these properties:

- ``email``: the users email which is used to identify the user (required)
- ``firstname``: optional
- ``lastname``: optional
- ``trusted``: set this to true if this is a trusted user (required), see ???
- ``roles``: A list with role names. The only supported role is ``admin``
  which allows a user to use the administration frontend.

Example:

.. sourcecode:: json

    {
        "email": "stromberg@finsdorf.de",
        "firstname": "Bernd",
        "trusted": false,
        "roles": ["admin"]
    }

The data is validated with this json-schema::

.. sourcecode:: python

    >>> from iris.service.auth.sso import SSO_USER_SCHEMA
    >>> print_json(SSO_USER_SCHEMA)
    {
      "properties": {
        "email": {
          "type": "string"
        },
        "email_trusted": {
          "type": "boolean"
        },
        "firstname": {
          "type": "string"
        },
        "lastname": {
          "type": "string"
        },
        "mobile": {
          "type": "string"
        },
        "mobile_trusted": {
          "type": "boolean"
        },
        "roles": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "street": {
          "type": "string"
        },
        "town": {
          "type": "string"
        },
        "zip": {
          "type": "string"
        }
      },
      "required": [
        "email"
      ],
      "type": "object"
    }


The Signature
^^^^^^^^^^^^^

Generated using ``HMAC->SHA1(api_secret_key, message + ' ' + timestamp)``

The Timestamp
^^^^^^^^^^^^^

The timestamp when the message was generated, formatted as a unix timestamp.

The timestamp is not Base-64 encoded.

SSO payloads expire after 2 hours.


IRIS SSO-Provider Setup
=======================

IRIS must add configuration data for each SSO-Provider it supports.

Data needed:

- ``API-Public-Key``: generated by IRIS
- ``API-Secret-Key``: generated by IRIS
- ``SSO-Login-URL``: full URL to the external login page


Login Integration
=================

IRIS has no integrated user authentification but uses external SSO-Providers.
SSO-Providers must provide an ``SSO-Login-URL`` which can be used to login a
user.

This URL is called with the following GET parameters:

- ``irisreturl``: URL to which the login must return after a successful login.
                  This parameter is used in the ``iris-sso-login.js``
                  javascript.


Embed IRIS-Login-Support Javascript
-----------------------------------

The ``iris-sso-login.js`` javascript code must be loaded in the HEAD of the
login page.

The support code will check if the user is already logged in and will
immediately redirect to the ``irisreturl`` if he is logged in.


Login Page Requirements
-----------------------

Because the ``IRIS-Login-Support`` code expects that the ``irisConfig`` data
provides the user data in the ``remote_auth`` property the login page must
reload after a successful login. After login ``remote_auth`` must be updated
by the backend to allow ``iris-sso-login.js`` to detect the user and redirect
back to ``irisreturl``.


Logout a User
=============

To logout a user provide an empty JSON object ``{}`` as the message data.


API-Key
=======

The The API-Key is needed to make it possible to have multiple SSO providers
using different API-Secret-Keys.


SSO Code Examples
=================


Javascript
----------

.. sourcecode:: javascript

  var crypto = require('crypto');

  function createRemoteAuth(data) {
    var data_json = JSON.stringify(data);
    var message = new Buffer(data_json).toString('base64');
    var timestamp = Math.floor(new Date().getTime() / 1000);
    var sigAuth = message + ' ' + timestamp;
    var sigHash = crypto.createHmac('SHA1', secret_key).update(sigAuth).digest('hex');
    return message + ', ' + sigHash + ', ' + timestamp;
  }
