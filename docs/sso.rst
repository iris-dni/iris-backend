==============
Single Sign On
==============

.. contents::


SSO (Signel Sign On) is currently the only way to authenticate a user.


Integration On External Pages
=============================

To be able to provide SSO for IRIS a page using the IRIS widgets must provide
sso settings.

.. sourcecode:: javascript

    var IRISConfig = {
        sso: function() {
            this.page.remote_auth = "<message>, <hmac>, <timestamp>";
            this.page.api_key = "...";
            this.page.name = "Remote Portal Name";
            this.page.icon = "http://images.remote.com/favicon.png";
            this.page.loginUrl = "https://remote.com/signin";   // IRIS redirects to this URL upon sign-in/up
            this.page.logoutUrl = "https://remote.com/signout"; // IRIS redirects to this URL upon logout
        }
    }

remote_auth
-----------

The remote_auth property provides the following three parts to login/logout
the user via sso.

The Message
^^^^^^^^^^^

This is the JSON serialized user data and must be base64 encoded.

User data can contain these properties:

- ``email``: the users email which is used to identify the user (required)
- ``trusted``: set this to true if this is a trusted user (required), see ???

Example:

.. sourcecode:: json

    {
        "email": "stromberg@finsdorf.de",
        "trusted": false
    }

The Signature
^^^^^^^^^^^^^

Generated using ``HMAC->SHA1(api_secret_key, message + ' ' + timestamp)``

The Timestamp
^^^^^^^^^^^^^

The timestamp when the message was generated, formatted as a unix timestamp.

The timestamp is not Base-64 encoded.

SSO payloads expire after 2 hours.


IRIS SSO-Provider Setup
=======================

IRIS must add configuration data for eacj SSO-Provider it supports.

Data needed:

- ``API-Public-Key``: generated by IRIS
- ``API-Secret-Key``: generated by IRIS
- ``SSO-Login-URL``: full URL to the external login page


Login Integration
=================

IRIS has no integrated user authentification but uses external SSO-Providers.
SSO-Providers must provide an ``SSO-Login-URL`` which can be used to login a
user.

This URL is called with the following GET parameters:

- ``return_url``: URL to which the login must return after a successful login.
                  This parameter is used in the ``IRIS-Login-Support``
                  javascript.


Embed IRIS-Login-Support Javascript
-----------------------------------

The ``IRIS-Login-Support`` javascript code must be loaded in the HEAD of the
login page.

The support code will check if the user is already logged in and will
immediately redirect to the ``return_url`` if he is logged in.


Login Page Requirements
-----------------------

Because the ``IRIS-Login-Support`` code expects that the ``IRISConfig`` data
provides the user data in the ``remote_auth`` property the login page must
reload after a successful login.


Logout a User
=============

To logout a user provide an empty JSON object ``{}`` as the message data.


API-Key
=======

The The API-Key is needed to make it possible to have multiple SSO providers
using different API-Secret-Keys.


SSO Code Examples
=================

TODO: Provide code examples
